/*
 * Copyright 2016 GoldenMace IT Solutions
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.atishay.online.utility;

import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.Snackbar;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.Html;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.atishay.online.AppBaseActivity;
import com.atishay.online.AtishayOnlineApp;
import com.atishay.online.R;
import com.atishay.online.common.CommonAdapter;
import com.atishay.online.common.CommonInterface;
import com.atishay.online.common.CommonRechargeResponse;
import com.atishay.online.common.SurchargeBean;
import com.atishay.online.utils.Constants;
import com.atishay.online.utils.DialogUtils;
import com.atishay.online.utils.Loader;
import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

import static com.atishay.online.utils.Constants.ELE_BEST_Mumbai;
import static com.atishay.online.utils.Constants.ELE_BSES_RAJDHANI;
import static com.atishay.online.utils.Constants.ELE_MPSEB_BHOPAL_DIVISION;
import static com.atishay.online.utils.Constants.ELE_MSEDCMAHARASHRTA;
import static com.atishay.online.utils.Constants.ELE_RELIANCEENERGY;
import static com.atishay.online.utils.Constants.ELE_TORRENTPOWER;
import static com.atishay.online.utils.Constants.INS_ICICILIFE;
import static com.atishay.online.utils.Constants.INS_TATALIFE;
import static com.atishay.online.utils.Constants.MAHANAGAR_GAS_LIMITED;
import static com.atishay.online.utils.Constants.PENDING;
import static com.atishay.online.utils.Constants.REGX_AMOUNT;
import static com.atishay.online.utils.Constants.SUCCESS;

/**
 * Created by Vishal Patel on 15,November,2016.
 * Atishay Online
 * GoldenMace IT Solutions
 * vishal@goldenmace.com
 */

public class UtilityActivity extends AppBaseActivity implements UtilityView, DatePickerDialog.OnDateSetListener {

    @BindView(R.id.toolbar)
    Toolbar mToolbar;
    @BindView(R.id.utility_rlMain)
    RelativeLayout mUtilityView;
    @BindView(R.id.txtOperator)
    TextView mTxtOperator;
    @BindView(R.id.utility_spOperator)
    Spinner mOperator;
    @BindView(R.id.subscribe_llExtraView)
    LinearLayout mSubscribeExtraView;
    @BindView(R.id.txtSubscribeNo)
    TextView mTxtSubscribeNumber;
    @BindView(R.id.utility_edtSubscribeNo)
    EditText mSubscribeNumber;
    @BindView(R.id.service_llExtraView)
    LinearLayout mServiceExtraView;
    @BindView(R.id.txtServiceNo)
    TextView mTxtServiceNo;
    @BindView(R.id.utility_edtServiceNo)
    EditText mServiceNumber;
    @BindView(R.id.bill_llExtraView)
    LinearLayout mBillExtraView;
    @BindView(R.id.txtBillNo)
    TextView mTxtBillNumber;
    @BindView(R.id.utility_edtBillNo)
    EditText mBillNumber;
    @BindView(R.id.policy_llExtraView)
    LinearLayout mPolicyExtraView;
    @BindView(R.id.txtPolicyNo)
    TextView mTxtPolicyNumber;
    @BindView(R.id.utility_edtPolicyNo)
    EditText mPolicyNumber;
    @BindView(R.id.consumer_llExtraView)
    LinearLayout mConsumerExtraView;
    @BindView(R.id.txtConsumerNo)
    TextView mTxtConsumerNumber;
    @BindView(R.id.utility_edtConsumerNo)
    EditText mConsumerNumber;
    @BindView(R.id.dob_llExtraView)
    LinearLayout mDOBExtraView;
    @BindView(R.id.txtDateOfBirth)
    TextView mTxtDateOfBirth;
    @BindView(R.id.utility_edtDateOfBirth)
    EditText mDateOfBirth;
    @BindView(R.id.txtMobile)
    TextView mTxtMobile;
    @BindView(R.id.utility_edtMobile)
    EditText mMobile;
    @BindView(R.id.billunit_llExtraView)
    LinearLayout mBillUnitExtraView;
    @BindView(R.id.txtBillUnit)
    TextView mTxtBillUnit;
    @BindView(R.id.utility_edtBillUnit)
    EditText mBillUnit;
    @BindView(R.id.pcnumber_llExtraView)
    LinearLayout mPCNumberExtraView;
    @BindView(R.id.txtPCNumber)
    TextView mTxtPCNumber;
    @BindView(R.id.utility_edtPCNumber)
    EditText mPCNumber;
    @BindView(R.id.cnumber_llExtraView)
    LinearLayout mCNumberExtraView;
    @BindView(R.id.txtCNumber)
    TextView mTxtCNumber;
    @BindView(R.id.utility_edtCNumber)
    EditText mCNumber;
    @BindView(R.id.city_llExtraView)
    LinearLayout mCityExtraView;
    @BindView(R.id.txtCity)
    TextView mTxtCity;
    @BindView(R.id.utility_edtCity)
    EditText mCity;
    @BindView(R.id.billgroup_llExtraView)
    LinearLayout mBillGroupExtraView;
    @BindView(R.id.txtBillGroup)
    TextView mTxtBillGroup;
    @BindView(R.id.utility_edtBillGroup)
    EditText mBillGroup;
    @BindView(R.id.txtAmount)
    TextView mTxtAmount;
    @BindView(R.id.utility_edtAmount)
    EditText mBillAmount;
    @BindView(R.id.money_txtTotalAmunt)
    TextView mTxtTotalAmount;
    @BindView(R.id.money_edtTotalAmunt)
    EditText mTotalAmount;
    @BindView(R.id.txtTranCode)
    TextView mTxtTransactionCode;
    @BindView(R.id.utility_edtTransaction)
    EditText mTransactionCode;
    @BindView(R.id.utility_txtProceed)
    TextView mProccedPay;
    @BindView(R.id.loader)
    Loader mLoader;
    float surchargeValue;
    UtilityPresenter mUtilityPresenter;
    int statusImg;
    private ArrayList<CommonInterface> mUtilityOperatorList;
    private CommonAdapter mUtilityOperatorAdapter;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_utility);

        ButterKnife.bind(this);
        setToolbar(mToolbar);

        mUtilityPresenter = new UtilityPresenter(this);
        mUtilityOperatorList = new ArrayList<>();
        mUtilityOperatorAdapter = new CommonAdapter(this, mUtilityOperatorList);
        /**
         * Custom Toolbar with amount view
         */
        ButterKnife.<TextView>findById(this, R.id.toolbar_txtAmount).setText(getString(R.string.amount, AtishayOnlineApp.getAppInstance().getBalance()));
        ButterKnife.<TextView>findById(this, R.id.toolbar_txtTitle).setText(getString(R.string.utility));


        mTxtOperator.setText(Html.fromHtml(getString(R.string.operator)), TextView.BufferType.SPANNABLE);
        mTxtSubscribeNumber.setText(Html.fromHtml(getString(R.string.subscriber_number)), TextView.BufferType.SPANNABLE);
        mTxtServiceNo.setText(Html.fromHtml(getString(R.string.service_number)), TextView.BufferType.SPANNABLE);
        mTxtBillNumber.setText(Html.fromHtml(getString(R.string.bill_number)), TextView.BufferType.SPANNABLE);
        mTxtPolicyNumber.setText(Html.fromHtml(getString(R.string.policy_number)), TextView.BufferType.SPANNABLE);
        mTxtConsumerNumber.setText(Html.fromHtml(getString(R.string.consumer_number)), TextView.BufferType.SPANNABLE);
        mTxtDateOfBirth.setText(Html.fromHtml(getString(R.string.date_of_birth)), TextView.BufferType.SPANNABLE);
        mTxtMobile.setText(Html.fromHtml(getString(R.string.mobile_no)), TextView.BufferType.SPANNABLE);
        mTxtBillUnit.setText(Html.fromHtml(getString(R.string.bill_unit)), TextView.BufferType.SPANNABLE);
        mTxtPCNumber.setText(Html.fromHtml(getString(R.string.pc_number)), TextView.BufferType.SPANNABLE);
        mTxtCNumber.setText(Html.fromHtml(getString(R.string.cycle_number)), TextView.BufferType.SPANNABLE);
        mTxtCity.setText(Html.fromHtml(getString(R.string.city)), TextView.BufferType.SPANNABLE);
        mTxtBillGroup.setText(Html.fromHtml(getString(R.string.bill_group_number)), TextView.BufferType.SPANNABLE);
        mTxtAmount.setText(Html.fromHtml(getString(R.string.bill_amount)), TextView.BufferType.SPANNABLE);
        mTxtTotalAmount.setText(Html.fromHtml(getString(R.string.total_amount)), TextView.BufferType.SPANNABLE);
        mTxtTransactionCode.setText(Html.fromHtml(getString(R.string.trans_code)), TextView.BufferType.SPANNABLE);
        mUtilityPresenter.doUtilityOperator(mUsername, mPassword);
        mOperator.setAdapter(mUtilityOperatorAdapter);
        mDateOfBirth.setFocusable(false);
        mBillAmount.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                calculateTotalAmount(s.toString());
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mOperator.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                mTxtConsumerNumber.setText(Html.fromHtml(getString(R.string.consumer_number)), TextView.BufferType.SPANNABLE);
                mConsumerNumber.setHint(getString(R.string.hint_consumer_number));

                resetAllEditText();
                switch (mUtilityOperatorList.get(position).getTitle()) {
                    case ELE_MSEDCMAHARASHRTA:
                        mBillUnitExtraView.setVisibility(View.VISIBLE);
                        mPCNumberExtraView.setVisibility(View.VISIBLE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.GONE);
                        mDOBExtraView.setVisibility(View.GONE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.VISIBLE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mServiceExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                    case ELE_RELIANCEENERGY:
                        mServiceExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.VISIBLE);
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.GONE);
                        mCNumberExtraView.setVisibility(View.VISIBLE);
                        mDOBExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                    case ELE_TORRENTPOWER:
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.VISIBLE);
                        mPolicyExtraView.setVisibility(View.GONE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mDOBExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.GONE);
                        mServiceExtraView.setVisibility(View.VISIBLE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                    case INS_ICICILIFE:
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.VISIBLE);
                        mDOBExtraView.setVisibility(View.VISIBLE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.GONE);
                        mServiceExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                    case INS_TATALIFE:
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.VISIBLE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mDOBExtraView.setVisibility(View.VISIBLE);
                        mServiceExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                    case MAHANAGAR_GAS_LIMITED:
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.GONE);
                        mDOBExtraView.setVisibility(View.GONE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.GONE);
                        mServiceExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.VISIBLE);
                        mBillGroupExtraView.setVisibility(View.VISIBLE);
                        break;
                    default:
                        mBillUnitExtraView.setVisibility(View.GONE);
                        mPCNumberExtraView.setVisibility(View.GONE);
                        mCityExtraView.setVisibility(View.GONE);
                        mPolicyExtraView.setVisibility(View.GONE);
                        mCNumberExtraView.setVisibility(View.GONE);
                        mDOBExtraView.setVisibility(View.GONE);
                        mConsumerExtraView.setVisibility(View.VISIBLE);
                        mServiceExtraView.setVisibility(View.GONE);
                        mSubscribeExtraView.setVisibility(View.GONE);
                        mBillExtraView.setVisibility(View.GONE);
                        mBillGroupExtraView.setVisibility(View.GONE);
                        break;
                }
                mUtilityPresenter.doSurcharge(mUtilityOperatorList.get(position).getID());
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void resetAllEditText() {
        mSubscribeNumber.setText(null);
        mServiceNumber.setText(null);
        mBillNumber.setText(null);
        mPolicyNumber.setText(null);
        mConsumerNumber.setText(null);
        mDateOfBirth.setText(null);
        mMobile.setText(null);
        mBillUnit.setText(null);
        mPCNumber.setText(null);
        mCNumber.setText(null);
        mCity.setText(null);
        mBillGroup.setText(null);
        mBillAmount.setText(null);
        mTotalAmount.setText(null);
        mTransactionCode.setText(null);
    }

    private void calculateTotalAmount(String aAmount) {
        try {
            float value = Float.parseFloat(aAmount.toString());
            if (value > 0) {
                float sum = value + surchargeValue;
                mTotalAmount.setText(String.format("%.02f", sum));
            } else {
                mTotalAmount.setText(String.valueOf(0));
            }
        } catch (NumberFormatException ex) {
            mTotalAmount.setText(String.valueOf(0));
        }
    }

    @OnClick(R.id.utility_txtProceed)
    public void doUtilityRechargePay() {
        hideKeyboard();
        switch (mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getTitle()) {
            case ELE_RELIANCEENERGY:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mSubscribeNumber.getText().toString().isEmpty()
                        && !mCNumber.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mTotalAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.SUBSCRIBER_ID, mSubscribeNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.CYCLE_NUMBER, mCNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doElectricityRelianceBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            case INS_ICICILIFE:
            case INS_TATALIFE:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mPolicyNumber.getText().toString().isEmpty()
                        && !mDateOfBirth.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mTotalAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.SUBSCRIBER_ID, mPolicyNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.DOB, mDateOfBirth.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doInsuranceBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            case ELE_MSEDCMAHARASHRTA:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mConsumerNumber.getText().toString().isEmpty()
                        && !mBillUnit.getText().toString().isEmpty()
                        && !mPCNumber.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mTotalAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.SUBSCRIBER_ID, mConsumerNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.BILLING_UNIT, mBillUnit.getText().toString());
                        queryMap.put(Constants.ApiKeys.PROCCESSING_CYCLE, mPCNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doElectricityMaharashtraBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            case ELE_TORRENTPOWER:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mServiceNumber.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mCity.getText().toString().isEmpty()
                        && !mBillAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.SUBSCRIBER_ID, mServiceNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.CITY, mCity.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doElectricityTorrentBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            case MAHANAGAR_GAS_LIMITED:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mBillNumber.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mBillGroup.getText().toString().isEmpty()
                        && !mTotalAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.GAS_BILL_NO, mPolicyNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.BILL_GRP_NO, mDateOfBirth.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doMahanagarGasBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            case ELE_BEST_Mumbai:
            case ELE_BSES_RAJDHANI:
            case ELE_MPSEB_BHOPAL_DIVISION:
                if (mOperator != null && mOperator.getSelectedItem() != null
                        && !mConsumerNumber.getText().toString().isEmpty()
                        && !mMobile.getText().toString().isEmpty()
                        && !mTotalAmount.getText().toString().isEmpty()
                        && !mTransactionCode.getText().toString().isEmpty()) {
                    if (!Pattern.matches(REGX_AMOUNT, mBillAmount.getText().toString())) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (Float.parseFloat(mBillAmount.getText().toString()) <= 0) {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_bill_amount), Snackbar.LENGTH_LONG).show();
                    } else if (mTransPassword.equals(mTransactionCode.getText().toString())) {
                        Map<String, String> queryMap = new HashMap<>();
                        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                        queryMap.put(Constants.ApiKeys.TRANSACTION_PASSWORD, mTransPassword);
                        queryMap.put(Constants.ApiKeys.TELECOM_ID, String.valueOf(mUtilityOperatorList.get(mOperator.getSelectedItemPosition()).getID()));
                        queryMap.put(Constants.ApiKeys.SUBSCRIBER_ID, mConsumerNumber.getText().toString());
                        queryMap.put(Constants.ApiKeys.MOBILE_NO, mMobile.getText().toString());
                        queryMap.put(Constants.ApiKeys.AMOUNT, mBillAmount.getText().toString());
                        mUtilityPresenter.doElectricityBillPayment(queryMap);
                        mProccedPay.setEnabled(false);
                    } else {
                        Snackbar.make(mUtilityView, getResources().getString(R.string.invalid_transaction_password), Snackbar.LENGTH_SHORT).show();
                    }
                } else {
                    Snackbar.make(mUtilityView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                }
                break;
            default:
                break;
        }
    }

    @Override
    public void doUtilityOperator(ArrayList<UtilityBean> aUtilityList) {
        mUtilityOperatorList.clear();
        mUtilityOperatorList.addAll(aUtilityList);
        mUtilityOperatorAdapter.notifyDataSetChanged();
    }

    @Override
    public void showLoader(String aMessage) {
        if (aMessage != null) {
            mLoader.setText(aMessage);
        }
        mLoader.setVisibility(View.VISIBLE);
    }

    @Override
    public void showLoader(int aResId) {
        if (aResId > 0) {
            mLoader.setText(getString(aResId));
        }
        mLoader.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideLoader() {
        mLoader.setVisibility(View.GONE);
    }

    @Override
    public void noInternetConnection() {
        final Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                //Do something after 100ms
                mProccedPay.setEnabled(true);
            }
        }, 10);
        mLoader.setVisibility(View.GONE);
    }

    @Override
    public void apiError(String aError) {
        hideLoader();
        Snackbar.make(mUtilityView, aError, Snackbar.LENGTH_INDEFINITE).setAction(R.string.error_view_retry, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mUtilityPresenter.doUtilityOperator(mUsername, mPassword);
            }
        }).show();
    }

    @Override
    public void apiError(int aApiCode, String aError) {
        switch (aApiCode) {
            case Constants.APICODE.UTILITY_OPERATOR:
                Snackbar.make(mUtilityView, aError, Snackbar.LENGTH_INDEFINITE).setAction(R.string.error_view_retry, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mUtilityPresenter.doUtilityOperator(mUsername, mPassword);
                    }
                }).show();
                break;
            case Constants.APICODE.UTILITYRECHARGE:
                DialogUtils.getSingleButtonDialog(this, R.drawable.ic_fail, getResources().getString(R.string.postpaid_rcrg), aError, getString(R.string.lbl_ok), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (which == DialogInterface.BUTTON_POSITIVE) {
                            finish();
                        }
                    }
                }, false).show();
                break;
            default:
                Snackbar.make(mUtilityView, aError, Snackbar.LENGTH_LONG).show();
                break;
        }
        super.apiError(aApiCode, aError);
    }

    @OnClick(R.id.utility_edtDateOfBirth)
    void dateOfBirth() {
        Calendar now = Calendar.getInstance();
        DatePickerDialog dpd = DatePickerDialog.newInstance(
                UtilityActivity.this,
                now.get(Calendar.YEAR),
                now.get(Calendar.MONTH),
                now.get(Calendar.DAY_OF_MONTH)
        );
        dpd.setThemeDark(false);
        dpd.setAccentColor(ContextCompat.getColor(this, R.color.colorAccent));
        dpd.setTitle("DatePicker Title");
        dpd.show(getFragmentManager(), "Datepickerdialog");
    }

    @Override
    public void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {
        String date = dayOfMonth + "-" + (++monthOfYear) + "-" + year;
        mDateOfBirth.setText(date);
    }

    @Override
    public void doSurcharge(ArrayList<SurchargeBean> surcharge) {
        if (surcharge.size() > 0) {
            surchargeValue = surcharge.get(0).getSurCharge();
        } else {
            surchargeValue = 0;
        }
        calculateTotalAmount(mBillAmount.getText().toString());
    }

    @Override
    public void onUtilityRechargeDetails(CommonRechargeResponse aList) {
        if (aList.getStatus().equals(SUCCESS)) {
            statusImg = R.drawable.ic_success;
        } else if (aList.getStatus().equals(PENDING)) {
            statusImg = R.drawable.ic_warning_orange_24dp;
        } else {
            statusImg = R.drawable.ic_fail;
        }
        DialogUtils.getSingleButtonDialog(this, statusImg, getResources().getString(R.string.postpaid_rcrg), aList.getMsg(), getString(R.string.lbl_ok), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_POSITIVE) {
                    finish();
                }
            }
        }, false).show();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mUtilityPresenter.clearReferences();
    }
}
