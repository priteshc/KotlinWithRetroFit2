/*
 * Copyright 2016 GoldenMace IT Solutions
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.atishay.online.postpaid;

import com.atishay.online.AtishayOnlineApp;
import com.atishay.online.R;
import com.atishay.online.common.CommonBean;
import com.atishay.online.common.CommonRechargeResponse;
import com.atishay.online.common.SurchargeBean;
import com.atishay.online.utils.Constants;
import com.atishay.online.utils.network.ApiError;
import com.atishay.online.utils.network.RestApiCallback;
import com.goldenmace.framework.mvp.presenters.Presenter;
import com.goldenmace.framework.utils.NetworkUtils;

import java.net.HttpURLConnection;
import java.util.ArrayList;

import static com.atishay.online.utils.Constants.APICODE.POSTPAID_OPERATOR;

/**
 * Created by Vishal Patel on 15,November,2016.
 * Atishay Online
 * GoldenMace IT Solutions
 * vishal@goldenmace.com
 */

public class PostpaidPresenter implements Presenter, RestApiCallback<Object, ApiError<Object>> {

    PostpaidView mPostpaidView;
    PostpaidController mPostpaidController;
    private ArrayList<Integer> mApiList;

    public PostpaidPresenter(PostpaidView aPostpaidView) {
        mPostpaidView = aPostpaidView;
        mPostpaidController = new PostpaidController(this);
        mApiList = new ArrayList<>();
    }

    public void doPostOperator(String aUsername, String aPassword) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mPostpaidView.showLoader(R.string.please_wait);
            mApiList.add(POSTPAID_OPERATOR);
            mPostpaidController.doPostOperator(aUsername, aPassword);
        } else {
            mPostpaidView.hideLoader();
            mPostpaidView.noInternetConnection();
        }
    }

    public void doSurcharge(int surcharge) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mPostpaidView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.SURCHARGE);
            mPostpaidController.doSurcharge(surcharge);
        } else {
            mPostpaidView.noInternetConnection();
        }
    }

    public void doPostpaidRecharge(CommonBean aBeanArrayList) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mPostpaidView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.POSTPAIDRECHARGE);
            mPostpaidController.doPostpaidRecharge(aBeanArrayList);
        } else {
            mPostpaidView.hideLoader();
            mPostpaidView.noInternetConnection();
        }
    }

    public void doBSNLPostpaidRecharge(CommonBean aBeanArrayList) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mPostpaidView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.POSTPAIDRECHARGE);
            mPostpaidController.doBSNLPostpaidRecharge(aBeanArrayList);
        } else {
            mPostpaidView.hideLoader();
            mPostpaidView.noInternetConnection();
        }
    }

    @Override
    public void onSuccess(int aApiCode, Object aSuccessResponse) {
        if (mPostpaidView != null) {
            mApiList.remove(Integer.valueOf(aApiCode));
            if (mApiList.size() == 0) {
                mPostpaidView.hideLoader();
            }
            if (aSuccessResponse == null) {
                AtishayOnlineApp.getAppInstance().getString(R.string.error_network_server_errors);
            } else {
                switch (aApiCode) {
                    case POSTPAID_OPERATOR:
                        mPostpaidView.doPostpaidOperator((ArrayList<PostpaidOperatorBean>) aSuccessResponse);
                        break;
                    case Constants.APICODE.SURCHARGE:
                        mPostpaidView.doSurcharge((ArrayList<SurchargeBean>) aSuccessResponse);
                        break;
                    case Constants.APICODE.POSTPAIDRECHARGE:
                        mPostpaidView.onPostpaidRechargeDetails((CommonRechargeResponse) aSuccessResponse);
                        break;
                }
            }
        } else {

        }
    }

    @Override
    public void onApiError(int aApiCode, ApiError<Object> aFailureResponse) {
        if (mPostpaidView != null) {
            mApiList.remove(Integer.valueOf(aApiCode));
            if (mApiList.size() == 0) {
                mPostpaidView.hideLoader();
            }

            if (aFailureResponse.getApiErrorCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
                mPostpaidView.onUserUnAuthorized((String) aFailureResponse.getError());
                return;
            }
            if (aFailureResponse.getApiErrorCode() == -1) {
                mPostpaidView.apiError(aApiCode, (String) aFailureResponse.getError());
                return;
            }
            if (aFailureResponse.getError() instanceof String) {
                mPostpaidView.apiError((String) aFailureResponse.getError());
                return;
            }
            mPostpaidView.apiError((String) AtishayOnlineApp.getAppInstance().getString(R.string.error_network_server_errors));
        } else {

        }
    }

    @Override
    public void registerBus() {

    }

    @Override
    public void unRegisterBus() {

    }

    @Override
    public void clearReferences() {
        mPostpaidView = null;
    }
}
