package com.atishay.online.myaccountrecharge;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v7.widget.Toolbar;
import android.text.Html;
import android.text.TextUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.atishay.online.AppBaseActivity;
import com.atishay.online.AtishayOnlineApp;
import com.atishay.online.BaseResponse;
import com.atishay.online.R;
import com.atishay.online.common.CommonAdapter;
import com.atishay.online.common.CommonInterface;
import com.atishay.online.utils.Constants;
import com.atishay.online.utils.DialogUtils;
import com.atishay.online.utils.Loader;
import com.goldenmace.framework.utils.NetworkUtils;
import com.jaredrummler.materialspinner.MaterialSpinner;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

import static com.atishay.online.utils.Constants.CASH_TYPE;
import static com.atishay.online.utils.Constants.ONLINE_TYPE;
import static com.atishay.online.utils.Constants.PENDING;
import static com.atishay.online.utils.Constants.REGX_AMOUNT;
import static com.atishay.online.utils.Constants.SUCCESS;

/**
 * Created by Vishal Patel on 25,November,2016.
 * Atishay Online
 * GoldenMace IT Solutions
 * vishal@goldenmace.com
 */

public class AccountRechargeActivity extends AppBaseActivity implements AccountRechargeView {
    @BindView(R.id.toolbar)
    Toolbar mToolbar;
    @BindView(R.id.ac_recharge_rlMain)
    RelativeLayout mRechargeMainView;
    @BindView(R.id.ac_recharge_spBankList)
    Spinner mBankData;
    @BindView(R.id.ac_recharge_spTransactionType)
    Spinner mTransactionTypeData;
    @BindView(R.id.txtTransactionType)
    TextView mTxtTransactionType;
    @BindView(R.id.txtBankName)
    TextView mTxtBankList;
    @BindView(R.id.txtUTR)
    TextView mTxtURTNo;
    @BindView(R.id.ac_recharge_edtUTR)
    EditText mURTNo;
    @BindView(R.id.txtAmount)
    TextView mTxtAmount;
    @BindView(R.id.ac_recharge_edtAmount)
    EditText mAmount;
    @BindView(R.id.cash_llView)
    LinearLayout mCashView;
    @BindView(R.id.loader)
    Loader mLoader;
    AccountRechargePresenter mAccountRechargePresenter;
    int statusImg;
    private ArrayList<CommonInterface> mBankList;
    private ArrayList<CommonInterface> mTransactionType;
    private CommonAdapter mBankListAdapter;
    private CommonAdapter mTransTypeAdapter;
    private MaterialSpinner bankspinner;

    private ArrayList<String> bankname;
    private RadioGroup radioGroup;
    private RadioButton radioButton;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_myac_recharge);
        ButterKnife.bind(this);
        setToolbar(mToolbar);
        mAccountRechargePresenter = new AccountRechargePresenter(this);
        mBankList = new ArrayList<>();
        mTransactionType = new ArrayList<>();
        bankname = new ArrayList<>();
        bankspinner = (MaterialSpinner) findViewById(R.id.bankspinner);
        radioGroup = (RadioGroup) findViewById(R.id.radioGroup1);
        mAmount.setTransformationMethod(null);

        /**
         * Custom Toolbar with amount view
         */
        ButterKnife.<TextView>findById(this, R.id.toolbar_txtAmount).setText(getString(R.string.amount, AtishayOnlineApp.getAppInstance().getBalance()));
        ButterKnife.<TextView>findById(this, R.id.toolbar_txtTitle).setText(getString(R.string.ac_recharge));


        mTxtTransactionType.setText(Html.fromHtml(getString(R.string.trans_type)), TextView.BufferType.SPANNABLE);
        mTxtBankList.setText(Html.fromHtml(getString(R.string.bank_name)), TextView.BufferType.SPANNABLE);
        mTxtURTNo.setText(Html.fromHtml(getString(R.string.utr_no)), TextView.BufferType.SPANNABLE);
        mTxtAmount.setText(Html.fromHtml(getString(R.string.money_amount)), TextView.BufferType.SPANNABLE);
        mCashView.setVisibility(View.VISIBLE);
        mBankListAdapter = new CommonAdapter(this, mBankList);
        mTransTypeAdapter = new CommonAdapter(this, mTransactionType);

        mAccountRechargePresenter.doTransactionTypeList(mUsername, mPassword);
        mAccountRechargePresenter.doBankList(mUsername, mPassword);
        mBankData.setAdapter(mBankListAdapter);
        mTransactionTypeData.setAdapter(mTransTypeAdapter);

        mTransactionTypeData.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                resetAllEditText();
                switch (mTransactionType.get(position).getTitle()) {
                    case ONLINE_TYPE:
                        mCashView.setVisibility(View.VISIBLE);
                        break;
                    case CASH_TYPE:
                        mCashView.setVisibility(View.GONE);
                        break;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }




    public void onRadioButtonClicked(View v) {


        RadioButton rb1 = (RadioButton) findViewById(R.id.online);
        RadioButton rb2 = (RadioButton) findViewById(R.id.cash);



        boolean  checked = ((RadioButton) v).isChecked();

        resetAllEditText();


        switch(v.getId()){
            case R.id.online:
                if(checked)
                    mCashView.setVisibility(View.VISIBLE);
                break;
            case R.id.cash:
                if(checked)
                    mCashView.setVisibility(View.GONE);
                break;
        }
    }


    @Override
    protected void onResume() {
        ButterKnife.<TextView>findById(this, R.id.toolbar_txtAmount).setText(getString(R.string.amount, AtishayOnlineApp.getAppInstance().getBalance()));
        super.onResume();
    }

    private void resetAllEditText() {
        mURTNo.setText(null);
        mAmount.setText(null);
    }

    @OnClick(R.id.ac_recharge_txtSubmit)
    public void doAccountRecharge() {
        hideKeyboard();

        int selectedId = radioGroup.getCheckedRadioButtonId();

        radioButton = (RadioButton) findViewById(selectedId);



        String trantype = radioButton.getText().toString();

        if ((NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance()))) {
            if (mTransactionType.size() != 0 && mBankList.size() != 0 && bankname.size() != 0) {
                switch (trantype) {
                    case ONLINE_TYPE:

                        if (bankspinner != null && bankspinner.getSelectedIndex() != 0 && !TextUtils.isEmpty(mURTNo.getText().toString())
                                && !mAmount.getText().toString().isEmpty()) {
                            if (!Pattern.matches(REGX_AMOUNT, mAmount.getText().toString())) {
                                Snackbar.make(mRechargeMainView, getResources().getString(R.string.invalid_recharge_amount), Snackbar.LENGTH_LONG).show();
                            } else if (Float.parseFloat(mAmount.getText().toString()) <= 0) {
                                Snackbar.make(mRechargeMainView, getResources().getString(R.string.invalid_recharge_amount), Snackbar.LENGTH_LONG).show();
                            } else {

                                Map<String, String> queryMap = new HashMap<>();
                                queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                                queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                                queryMap.put(Constants.ApiKeys.TRANSACTIONTYPE, ONLINE_TYPE);
                                queryMap.put(Constants.ApiKeys.BNKID, String.valueOf(bankspinner.getSelectedIndex()));
                                queryMap.put(Constants.ApiKeys.UTRNO, mURTNo.getText().toString());
                                queryMap.put(Constants.ApiKeys.AMOUNT, mAmount.getText().toString());
                                mAccountRechargePresenter.doOnlineAccountRecharge(queryMap);


                            }
                        } else {
                            Snackbar.make(mRechargeMainView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                        }
                        break;
                    case CASH_TYPE:

                        if (!mAmount.getText().toString().isEmpty()) {
                            if (!Pattern.matches(REGX_AMOUNT, mAmount.getText().toString())) {
                                Snackbar.make(mRechargeMainView, getResources().getString(R.string.invalid_recharge_amount), Snackbar.LENGTH_LONG).show();
                            } else if (Float.parseFloat(mAmount.getText().toString()) <= 0) {
                                Snackbar.make(mRechargeMainView, getResources().getString(R.string.invalid_recharge_amount), Snackbar.LENGTH_LONG).show();
                            } else {
                                Map<String, String> queryMap = new HashMap<>();
                                queryMap.put(Constants.ApiKeys.USERNAME, mUsername);
                                queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);
                                queryMap.put(Constants.ApiKeys.TRANSACTIONTYPE, CASH_TYPE);
                                queryMap.put(Constants.ApiKeys.UTRNO, "NA");
                                queryMap.put(Constants.ApiKeys.AMOUNT, mAmount.getText().toString());
                                mAccountRechargePresenter.doCashAccountRecharge(queryMap);
                            }
                        } else {
                            Snackbar.make(mRechargeMainView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
                        }
                        break;
                }
            } else {
                Snackbar.make(mRechargeMainView, getResources().getString(R.string.error_field_required), Snackbar.LENGTH_SHORT).show();
            }
        } else {
            noInternetConnection();
        }
    }

    @OnClick(R.id.ac_recharge_txtReport)
    public void viewReport() {
        startActivity(new Intent(this, AccountRechargeReportActivity.class));
    }

    @Override
    public void showLoader(String aMessage) {
        if (aMessage != null) {
            mLoader.setText(aMessage);
        }
        mLoader.setVisibility(View.VISIBLE);
    }

    @Override
    public void showLoader(int aResId) {
        if (aResId > 0) {
            mLoader.setText(getString(aResId));
        }
        mLoader.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideLoader() {
        mLoader.setVisibility(View.GONE);
    }

    @Override
    public void noInternetConnection() {
        Snackbar.make(mRechargeMainView, getString(R.string.error_network_no_internet), Snackbar.LENGTH_SHORT).show();
        hideLoader();
    }

    @Override
    public void apiError(String aError) {
        hideLoader();
        Snackbar.make(mRechargeMainView, aError, Snackbar.LENGTH_INDEFINITE).setAction(R.string.error_view_retry, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAccountRechargePresenter.doTransactionTypeList(mUsername, mPassword);
                mAccountRechargePresenter.doBankList(mUsername, mPassword);
            }
        }).show();
    }

    @Override
    public void onAccountReportFetched(ArrayList<AccountRechargeReportBean> aSuccessResponse) {
    }

    @Override
    public void onBankListFetched(ArrayList<BankListBean> aList) {
        mBankList.clear();
        bankname.clear();

        for(int i=0;i< aList.size();i++){

         bankname.add(aList.get(i).getBankname());

        }

        bankname.add(0,"Select Bank");

        bankspinner.setItems(bankname);

        mBankList.addAll(aList);
        mBankListAdapter.notifyDataSetChanged();
    }

    @Override
    public void onTransactionTypeListFetched(ArrayList<TransactionTypeBean> aList) {
        mTransactionType.clear();
        mTransactionType.addAll(aList);
        Collections.reverse(mTransactionType);
        mTransTypeAdapter.notifyDataSetChanged();
    }

    @Override
    public void doTransactionCompleteDetails(BaseResponse aList) {
        if (aList.getStatus().equals(SUCCESS)) {
            statusImg = R.drawable.ic_success;
        } else if (aList.getStatus().equals(PENDING)) {
            statusImg = R.drawable.ic_warning_orange_24dp;
        } else {
            statusImg = R.drawable.ic_fail;
        }
        DialogUtils.getSingleButtonDialog(this, statusImg, getResources().getString(R.string.ac_rcrg), aList.getMsg(), getString(R.string.lbl_ok), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_POSITIVE) {
                    finish();
                }
            }
        }, false).show();
    }

    @Override
    public void apiError(int aApiCode, String aError) {
        switch (aApiCode) {
            case Constants.APICODE.TRANSACTIONTYPE:
            case Constants.APICODE.BANKLIST:
                Snackbar.make(mRechargeMainView, aError, Snackbar.LENGTH_INDEFINITE).setAction(R.string.error_view_retry, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        mAccountRechargePresenter.doTransactionTypeList(mUsername, mPassword);
                        mAccountRechargePresenter.doBankList(mUsername, mPassword);
                    }
                }).show();
                break;
            case Constants.APICODE.MYACCOUNTRECHARGE:
                DialogUtils.getSingleButtonDialog(this, R.drawable.ic_fail, getResources().getString(R.string.ac_rcrg), aError, getString(R.string.lbl_ok), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (which == DialogInterface.BUTTON_POSITIVE) {
                            finish();
                        }
                    }
                }, false).show();
                break;
            default:
                Snackbar.make(mRechargeMainView, aError, Snackbar.LENGTH_LONG).show();
                break;
        }
        super.apiError(aApiCode, aError);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mAccountRechargePresenter.clearReferences();
    }
}
