/*
 * Copyright 2016 Goldenmace IT Solutions
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.atishay.online.moneytransfer;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ExpandableListView;

import com.atishay.online.R;
import com.goldenmace.framework.views.widgets.errorview.ErrorView;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by Vishal Patel on 3,December,2016.
 * AtishayOnline
 * GoldenMace IT Solutions
 * vishal@goldenmace.com
 */

public class GroupFundHistoryFragment extends Fragment {

    @BindView(R.id.expandableListView)
    ExpandableListView expandableListView;
    @BindView(R.id.history_errorView)
    ErrorView mErrorView;
    GroupFundHistoryAdapter mGroupFundHistoryAdapter;
    Map<String, ArrayList<FundTransferHistoryResponse.TransactionHistory>> mGroupHistoryBeen;
    Context context;
    Bundle bundle;
    String mIsMainType;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = getActivity();

        bundle = this.getArguments();
        mIsMainType = bundle.getString("isMain");
        mGroupHistoryBeen = new LinkedHashMap<>();

        if (mIsMainType.equals("1")) {
            mGroupFundHistoryAdapter = new GroupFundHistoryAdapter(context, mGroupHistoryBeen, true);
        } else {
            mGroupFundHistoryAdapter = new GroupFundHistoryAdapter(context, mGroupHistoryBeen);
        }
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.tab_grouphistory, container, false);
        ButterKnife.bind(this, rootView);

        expandableListView.setAdapter(mGroupFundHistoryAdapter);
        if (mIsMainType.equals("2")) {
            expandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {

                @Override
                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition,
                                            long id) {
                    return false;
                }
            });
        }

        mErrorView.setOnRetryListener(new ErrorView.RetryListener() {
            @Override
            public void onRetry() {
                mErrorView.setVisibility(View.GONE);
                ((FundTransferHistoryActivity) getActivity()).fundTransferHistoryCall();
            }
        });
        return rootView;
    }

    public void onDataFetched(Map<String, ArrayList<FundTransferHistoryResponse.TransactionHistory>> aHistoryBeen) {
        if (aHistoryBeen != null) {
            mGroupHistoryBeen.clear();
            mGroupHistoryBeen.putAll(aHistoryBeen);
            mGroupFundHistoryAdapter.notifyDataSetChanged();
        } else {
            mErrorView.setVisibility(View.VISIBLE);
            mErrorView.setImage(R.drawable.ic_list_200dp);
            mErrorView.setTitle(getString(R.string.msg_no_record_found));
            mErrorView.setSubtitle(getString(R.string.grp_error_fund_money));
            mErrorView.setRetryButtonText("Refresh");
            mErrorView.showRetryButton(true);
        }
    }

    public void onDataReload() {
        mGroupHistoryBeen.clear();
        mGroupFundHistoryAdapter.notifyDataSetChanged();
    }
}
