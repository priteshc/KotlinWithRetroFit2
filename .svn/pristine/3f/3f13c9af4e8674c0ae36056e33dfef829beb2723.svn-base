/*
 * Copyright 2016 GoldenMace IT Solutions
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.atishay.online.utils;

import android.content.Context;
import android.content.res.TypedArray;
import android.support.v4.content.ContextCompat;
import android.text.Html;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.atishay.online.R;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by hrdudhat on 11/10/2016.
 */

public class Loader extends RelativeLayout {
    @BindView(R.id.loader_flContainer)
    View mflContainer;
    @BindView(R.id.progressBar)
    ProgressBar mprogressBar;
    @BindView(R.id.txtMessage)
    TextView mtxtMessage;
    @BindView(R.id.loader_llView)
    LinearLayout mLoaderBG;

    public Loader(Context context) {
        super(context);
        initView(context, null);
    }

    public Loader(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView(context, attrs);
    }

    public Loader(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView(context, attrs);
    }

    private void initView(Context aContext, AttributeSet attrs) {
        LayoutInflater.from(aContext).inflate(R.layout.layout_loader, this, true);
        ButterKnife.bind(this);
        if (attrs != null) {
            // get attributes style from it attrs.xml
            TypedArray typedArray = aContext.obtainStyledAttributes(attrs, R.styleable.Loader);
            for (int i = 0; i < typedArray.length(); i++) {
                int attr = typedArray.getIndex(i);
                switch (attr) {
                    case R.styleable.Loader_text:
                        mtxtMessage.setText(Html.fromHtml(typedArray.getString(attr)));

                        break;
                }
            }
            typedArray.recycle();
        }
    }

    public void setBackgroundColor(int value) {
        mLoaderBG.setBackgroundColor(value);
    }

    public void setBackgroundTrasperent() {
        mLoaderBG.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.trans));
        mflContainer.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.trans));
    }

    public void setText(String aMessage) {
        mtxtMessage.setText(aMessage);
    }

    public void setText(int aResId) {
        mtxtMessage.setText(aResId);
    }

    @Override
    public boolean isInEditMode() {
        return true;
    }
}
