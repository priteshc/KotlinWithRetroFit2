/* * Copyright 2016 GoldenMace IT Solutions * *    Licensed under the Apache License, Version 2.0 (the "License"); *    you may not use this file except in compliance with the License. *    You may obtain a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * *    Unless required by applicable law or agreed to in writing, software *    distributed under the License is distributed on an "AS IS" BASIS, *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *    See the License for the specific language governing permissions and *    limitations under the License. */package com.atishay.online.history;import android.content.Context;import android.support.v4.content.ContextCompat;import android.support.v7.widget.RecyclerView;import android.text.Html;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.atishay.online.Interface.ComplainCallback;import com.atishay.online.R;import com.atishay.online.utils.Constants;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;/** * Created by Vishal Patel on 18,October,2016. * AtishayOnline * GoldenMace IT Solutions * vishal@goldenmace.com */public class HistoryAdapter extends RecyclerView.Adapter<HistoryAdapter.HistoryViewHolder> {    public Context context;    private ArrayList<HistoryBean> mHistoryList;    private SimpleDateFormat mSDFRequired;    private SimpleDateFormat mSDFOld;    private SimpleDateFormat mSDRtime,dateformat;    private ComplainCallback complainCallback;    private int lastPosition = -1;    private String currentdate;    Calendar c ;    long days;    public HistoryAdapter(Context context, ArrayList<HistoryBean> aHistoryList,ComplainCallback complainCallback) {        this.context = context;        this.complainCallback = complainCallback;        this.mHistoryList = aHistoryList;        mSDFRequired = new SimpleDateFormat("dd-MM-yyyy");        mSDFOld = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.FFF");        mSDRtime = new SimpleDateFormat("hh:mm a");        dateformat = new SimpleDateFormat("dd/MM/yyyy hh:mm a");        c = Calendar.getInstance();        currentdate = dateformat.format(c.getTime());    }    @Override    public HistoryViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View itemView = LayoutInflater.from(parent.getContext())                .inflate(R.layout.item_history, parent, false);        return new HistoryViewHolder(itemView);    }    @Override    public void onBindViewHolder(final HistoryViewHolder holder, int position) {        final HistoryBean data = mHistoryList.get(position);        holder.mHistoryID.setText(data.getTransactionId());        holder.mHistoryRS.setText(String.valueOf(data.getAmount()));        try {            holder.mHistoryDate.setText(mSDFRequired.format(mSDFOld.parse(data.getTransactionDate())));            holder.mTime.setText(mSDRtime.format(mSDFOld.parse(data.getTransactionDate())));        } catch (ParseException aE) {            aE.printStackTrace();        }        if ((Constants.SERVICE_TYPE_DTH).equals(data.getServiceType())) {            holder.mHistoryTransType.setText(String.format("Recharge of %s DTH %s", data.getOperatorName(), data.getMobileNo()));        } else if ((Constants.SERVICE_TYPE_TELECOMM).equals(data.getServiceType())) {            holder.mHistoryTransType.setText(String.format("Recharge of %s mobile %s", data.getOperatorName(), data.getMobileNo()));        } else if ((Constants.SERVICE_TYPE_BILL_PAYMENT).equals(data.getServiceType())) {            holder.mHistoryTransType.setText(String.format("Bill payment of %s %s", data.getOperatorName(), data.getMobileNo()));        } else {            holder.mHistoryTransType.setText(String.format("%s recharge for mobile no %s", data.getOperatorName(), data.getMobileNo()));        }        try {          String nedate = dateformat.format(mSDFOld.parse(data.getTransactionDate()));           Date date1 = dateformat.parse(currentdate);          Date date2 = dateformat.parse(nedate);           days = printDifference(date2,date1);            if(days > 1){                holder.mButton.setVisibility(View.GONE);            }            else {                holder.mButton.setVisibility(View.VISIBLE);            }        } catch (ParseException aE) {            aE.printStackTrace();        }        if (data.getRechargeStatus().equals("Transaction Successful")) {            holder.mHistoryStatus.setText(data.getRechargeStatus());            holder.mHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.green));        } else if (data.getRechargeStatus().equals("Transaction Cancelled / Fail")) {            holder.mHistoryStatus.setText(data.getRechargeStatus());            holder.mHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.red));        } else if (data.getRechargeStatus().equals("Transaction Pending")) {            holder.mHistoryStatus.setText(data.getRechargeStatus());            holder.mHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.orange));        } else {            holder.mHistoryStatus.setText(data.getRechargeStatus());            holder.mHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.black_overlay));        }        holder.mButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Your stuff here              //  Toast.makeText(context,data.getTransactionId(),Toast.LENGTH_SHORT).show();                complainCallback.onMethodCallback(data.getTransactionId());            }        });        setAnimation(holder.itemView, position);    }    public long printDifference(Date startDate, Date endDate) {        //milliseconds        long different = endDate.getTime() - startDate.getTime();        System.out.println("startDate : " + startDate);        System.out.println("endDate : "+ endDate);        System.out.println("different : " + different);        long secondsInMilli = 1000;        long minutesInMilli = secondsInMilli * 60;        long hoursInMilli = minutesInMilli * 60;        long daysInMilli = hoursInMilli * 24;        long elapsedDays = different / daysInMilli;        different = different % daysInMilli;        long elapsedHours = different / hoursInMilli;        different = different % hoursInMilli;        long elapsedMinutes = different / minutesInMilli;        different = different % minutesInMilli;        long elapsedSeconds = different / secondsInMilli;        System.out.printf(                "%d days, %d hours, %d minutes, %d seconds%n",                elapsedDays, elapsedHours, elapsedMinutes, elapsedSeconds);        return elapsedDays;    }    private void setAnimation(View viewToAnimate, int position)    {        // If the bound view wasn't previously displayed on screen, it's animated        if (position > lastPosition)        {            Animation animation = AnimationUtils.loadAnimation(context, R.anim.slide_left);            animation.setStartOffset(position*100);            viewToAnimate.startAnimation(animation);            lastPosition = position;        }    }    @Override    public int getItemCount() {        return mHistoryList.size();    }    public class HistoryViewHolder extends RecyclerView.ViewHolder {        @BindView(R.id.history_txtID)        TextView mHistoryID;        @BindView(R.id.history_txtRS)        TextView mHistoryRS;        @BindView(R.id.history_txtDate)        TextView mHistoryDate;        @BindView(R.id.history_txtTransType)        TextView mHistoryTransType;        @BindView(R.id.history_txtTransStatus)        TextView mHistoryStatus;        @BindView(R.id.time)        TextView mTime;        @BindView(R.id.complain)        Button mButton;        public HistoryViewHolder(View view) {            super(view);            ButterKnife.bind(this, view);        }    }}