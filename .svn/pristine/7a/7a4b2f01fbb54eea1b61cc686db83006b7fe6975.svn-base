/* * Copyright 2016 GoldenMace IT Solutions * *    Licensed under the Apache License, Version 2.0 (the "License"); *    you may not use this file except in compliance with the License. *    You may obtain a copy of the License at * *        http://www.apache.org/licenses/LICENSE-2.0 * *    Unless required by applicable law or agreed to in writing, software *    distributed under the License is distributed on an "AS IS" BASIS, *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *    See the License for the specific language governing permissions and *    limitations under the License. */package com.atishay.online.moneytransfer;import android.content.Context;import android.content.Intent;import android.support.v4.content.ContextCompat;import android.support.v7.widget.RecyclerView;import android.text.Html;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.atishay.online.R;import com.atishay.online.utils.Constants;import com.goldenmace.framework.utils.SharedPrefUtils;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import butterknife.BindView;import butterknife.ButterKnife;import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;/** * Created by Vishal Patel on 18,October,2016. * AtishayOnline * GoldenMace IT Solutions * vishal@goldenmace.com */public class FundTransferHistoryAdapter extends RecyclerView.Adapter<FundTransferHistoryAdapter.FundHistoryViewHolder> {    public static String mUsername;    public static String mPassword;    public static String mAgentCode;    public static FundTransferHistoryResponse.TransactionHistory data;    public Context context;    View itemView;    private ArrayList<FundTransferHistoryResponse.TransactionHistory> mSingleHistoryList;    private boolean aIsMainFundHistory = true;    public FundTransferHistoryAdapter(Context context, ArrayList<FundTransferHistoryResponse.TransactionHistory> aSingleHistoryList) {        this(context, aSingleHistoryList, false);    }    public FundTransferHistoryAdapter(Context context, ArrayList<FundTransferHistoryResponse.TransactionHistory> aSingleHistoryList, boolean aIsMainFundHistory) {        this.context = context;        this.mSingleHistoryList = aSingleHistoryList;        this.aIsMainFundHistory = aIsMainFundHistory;    }    public static void singleOTPCallBack(String otp) {        Map<String, String> queryMap = new HashMap<>();        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);        queryMap.put(Constants.ApiKeys.AGENTCODE, mAgentCode);        queryMap.put(Constants.ApiKeys.UNIQUETRANSID, data.getUniqueTransID());        queryMap.put(Constants.ApiKeys.TRANSACTIONID, data.getTransactionID());        queryMap.put(Constants.ApiKeys.PTID, String.valueOf(System.currentTimeMillis()));        queryMap.put(Constants.ApiKeys.OTP, otp);        FundTransferHistoryActivity.mFundTransferPresenter.doValidateRefundTransaction(queryMap);    }    @Override    public FundHistoryViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        itemView = LayoutInflater.from(parent.getContext())                .inflate(R.layout.item_fundtransfer_history, parent, false);        return new FundHistoryViewHolder(itemView);    }    @Override    public void onBindViewHolder(final FundHistoryViewHolder holder, final int position) {        data = mSingleHistoryList.get(position);        mUsername = SharedPrefUtils.getString(context, Constants.SharedPref.USER_DETAIL, Constants.SharedPref.KEY_USER_NAME, "");        mPassword = SharedPrefUtils.getString(context, Constants.SharedPref.USER_DETAIL, Constants.SharedPref.KEY_PASSWORD, "");        mAgentCode = SharedPrefUtils.getString(context, Constants.SharedPref.USER_DETAIL, Constants.SharedPref.KEY_AGENT_CODE, "");        if (!aIsMainFundHistory) {            holder.mFundHistorySenderName.setVisibility(View.GONE);            holder.mFundHistoryBeneCode.setVisibility(View.VISIBLE);            holder.mFundHistoryUniqueID.setVisibility(View.GONE);            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mArrow.setVisibility(View.VISIBLE);            holder.mFundHistoryID.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.unique_transid) + " :</b> %s", data.getUniqueTransID())));            holder.mView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Intent passPrint = new Intent(context, SinglePDFPrintActivity.class);                    passPrint.setFlags(FLAG_ACTIVITY_NEW_TASK);                    passPrint.putExtra("printObject", mSingleHistoryList.get(position));                    context.startActivity(passPrint);                }            });        } else {            holder.mArrow.setVisibility(View.GONE);            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mFundHistoryUTR.setVisibility(View.GONE);            holder.mFundHistoryID.setText(Html.fromHtml(String.format("<b>TRANS ID :</b> %s", data.getTransactionID())));        }        holder.mFundHistoryRS.setText(context.getResources().getString(R.string.amount, String.format("%.2f", data.getAmount())));        holder.mFundHistoryDate.setText(data.getTransactionDate());        holder.mFundHistoryUniqueID.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.unique_transid) + " :</b> %s", data.getUniqueTransID())));        holder.mFundHistoryBeneName.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.name) + " :</b> %s", data.getBeneficiaryName())));        holder.mFundHistoryBeneCode.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.ben_code) + " :</b> %s", data.getBeneficiaryCode())));        holder.mFundHistoryBankNo.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.a_c_no) + " :</b> %s", data.getBenBankAccountNo())));        holder.mFundHistorySenderName.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.sender_name) + " :</b> %s", data.getSenderName())));        holder.mFundHistoryUTR.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.utr) + " :</b> %s", data.getUTR())));        holder.mFundHistoryMobile.setText(Html.fromHtml(String.format("<b>" + context.getResources().getString(R.string.sender_mobile) + " :</b> %s", data.getSenderMobileNo())));        if (data.getRechargeStatus().equals("Successful")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.green));        } else if (data.getRechargeStatus().equals("Transaction Cancelled / Fail")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.red));        } else if (data.getRechargeStatus().equals("Failure")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryTransaction.setText(context.getResources().getString(R.string.query_refund));            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.red));            if (aIsMainFundHistory) {                holder.mFundHistoryTransaction.setVisibility(View.GONE);            } else {                holder.mFundHistoryTransaction.setVisibility(View.VISIBLE);                holder.mFundHistoryTransaction.setTag(position);                holder.mFundHistoryTransaction.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (TextUtils.isEmpty(data.getPtid())) {                            Toast.makeText(context, "Website transaction can't be queried from app.", Toast.LENGTH_SHORT).show();                        } else {                            refundCallBack(mSingleHistoryList.get((Integer) v.getTag()));                        }                    }                });            }        } else if (data.getRechargeStatus().equals("Hold(T)")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.orange));            if (aIsMainFundHistory) {                holder.mFundHistoryTransaction.setVisibility(View.GONE);            } else {                holder.mFundHistoryTransaction.setVisibility(View.VISIBLE);                holder.mFundHistoryTransaction.setTag(position);                holder.mFundHistoryTransaction.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        doRequestParam(mSingleHistoryList.get((Integer) v.getTag()));                    }                });            }        } else if (data.getRechargeStatus().equals("Transaction Cancelled and Refunded")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.red));        } else if (data.getRechargeStatus().equals("Processed")) {            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.green));            if (aIsMainFundHistory) {                holder.mFundHistoryTransaction.setVisibility(View.GONE);            } else {                holder.mFundHistoryTransaction.setVisibility(View.VISIBLE);                holder.mFundHistoryTransaction.setTag(position);                holder.mFundHistoryTransaction.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        doRequestParam(mSingleHistoryList.get((Integer) v.getTag()));                    }                });            }        } else {            holder.mFundHistoryTransaction.setVisibility(View.GONE);            holder.mFundHistoryStatus.setText(data.getRechargeStatus());            holder.mFundHistoryStatus.setTextColor(ContextCompat.getColor(context, R.color.black_overlay));        }    }    private void doRequestParam(FundTransferHistoryResponse.TransactionHistory data) {        Map<String, String> queryMap = new HashMap<>();        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);        queryMap.put(Constants.ApiKeys.AGENTCODE, mAgentCode);        queryMap.put(Constants.ApiKeys.UNIQUETRANSID, data.getUniqueTransID());        queryMap.put(Constants.ApiKeys.PTID, String.valueOf(System.currentTimeMillis()));        queryMap.put(Constants.ApiKeys.TRANSACTIONID, data.getTransactionID());        FundTransferHistoryActivity.mFundTransferPresenter.doQueryRemittanceTransaction(queryMap);    }    private void refundCallBack(FundTransferHistoryResponse.TransactionHistory data) {        Map<String, String> queryMap = new HashMap<>();        queryMap.put(Constants.ApiKeys.USERNAME, mUsername);        queryMap.put(Constants.ApiKeys.PASSWORD, mPassword);        queryMap.put(Constants.ApiKeys.AGENTCODE, mAgentCode);        queryMap.put(Constants.ApiKeys.UNIQUETRANSID, data.getUniqueTransID());        queryMap.put(Constants.ApiKeys.TRANSACTIONID, data.getTransactionID());        queryMap.put(Constants.ApiKeys.PTID, String.valueOf(System.currentTimeMillis()));        FundTransferHistoryActivity.mFundTransferPresenter.doRefundTransaction(queryMap);    }    @Override    public int getItemCount() {        return mSingleHistoryList.size();    }    public class FundHistoryViewHolder extends RecyclerView.ViewHolder {        @BindView(R.id.fundtransfer_history_txtUniqueTansID)        TextView mFundHistoryUniqueID;        @BindView(R.id.fundtransfer_history_txtID)        TextView mFundHistoryID;        @BindView(R.id.fundtransfer_history_txtSenderName)        TextView mFundHistorySenderName;        @BindView(R.id.fundtransfer_history_txtMobile)        TextView mFundHistoryMobile;        @BindView(R.id.fundtransfer_history_txtBeneName)        TextView mFundHistoryBeneName;        @BindView(R.id.fundtransfer_history_txtBankNo)        TextView mFundHistoryBankNo;        @BindView(R.id.fundtransfer_history_txtRS)        TextView mFundHistoryRS;        @BindView(R.id.fundtransfer_history_txtDate)        TextView mFundHistoryDate;        @BindView(R.id.fundtransfer_history_txtTransStatus)        TextView mFundHistoryStatus;        @BindView(R.id.fundtransfer_history_txtQueryTransaction)        TextView mFundHistoryTransaction;        @BindView(R.id.fundtransfer_history_txtUTR)        TextView mFundHistoryUTR;        @BindView(R.id.fundtransfer_history_txtBeneCode)        TextView mFundHistoryBeneCode;        @BindView(R.id.arrow)        ImageView mArrow;        View mView;        public FundHistoryViewHolder(View view) {            super(view);            ButterKnife.bind(this, view);            mView = view;        }    }}