/*
 * Copyright 2016 GoldenMace IT Solutions
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.atishay.online.utility;

import com.atishay.online.AtishayOnlineApp;
import com.atishay.online.R;
import com.atishay.online.common.CommonRechargeResponse;
import com.atishay.online.common.SurchargeBean;
import com.atishay.online.utils.Constants;
import com.atishay.online.utils.network.ApiError;
import com.atishay.online.utils.network.RestApiCallback;
import com.goldenmace.framework.mvp.presenters.Presenter;
import com.goldenmace.framework.utils.NetworkUtils;

import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.Map;

import static com.atishay.online.utils.Constants.APICODE.UTILITYRECHARGE;
import static com.atishay.online.utils.Constants.APICODE.UTILITY_OPERATOR;

/**
 * Created by Vishal Patel on 16,November,2016.
 * Atishay Online
 * GoldenMace IT Solutions
 * vishal@goldenmace.com
 */

public class UtilityPresenter implements Presenter, RestApiCallback<Object, ApiError<Object>> {

    UtilityView mUtilityView;
    UtilityController mUtilityController;
    ArrayList<Integer> mApiList;

    public UtilityPresenter(UtilityView aUtilityView) {
        mUtilityView = aUtilityView;
        mUtilityController = new UtilityController(this);
        mApiList = new ArrayList<>();
    }

    void doUtilityOperator(String aUsername, String aPassword) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITY_OPERATOR);
            mUtilityController.doUtilityOperator(aUsername, aPassword);
        } else {
            mUtilityView.noInternetConnection();
        }
    }

    public void doSurcharge(int surcharge) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.SURCHARGE);
            mUtilityController.doSurcharge(surcharge);
        } else {
            mUtilityView.noInternetConnection();
        }
    }

    public void doElectricityBillPayment(Map<String, String> aQueryMap) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doElectricityRecharge(aQueryMap);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    public void doElectricityRelianceBillPayment(Map<String, String> aUtilityMapDataBean) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doElectricityRelianceRecharge(aUtilityMapDataBean);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    public void doElectricityMaharashtraBillPayment(Map<String, String> aQueryMap) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doElectricityMaharashtraRecharge(aQueryMap);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    public void doElectricityTorrentBillPayment(Map<String, String> aQueryMap) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doElectricityTorrentRecharge(aQueryMap);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    public void doInsuranceBillPayment(Map<String, String> aBeanArrayList) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doInsuranceBillPayment(aBeanArrayList);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    public void doMahanagarGasBillPayment(Map<String, String> aBeanArrayList) {
        if (NetworkUtils.isNetworkAvailable(AtishayOnlineApp.getAppInstance())) {
            mUtilityView.showLoader(R.string.please_wait);
            mApiList.add(Constants.APICODE.UTILITYRECHARGE);
            mUtilityController.doMahanagarGasBillPayment(aBeanArrayList);
        } else {
            mUtilityView.hideLoader();
            mUtilityView.noInternetConnection();
        }
    }

    @Override
    public void onSuccess(int aApiCode, Object aSuccessResponse) {
        if (mUtilityView != null) {
            mApiList.remove(Integer.valueOf(aApiCode));
            if (mApiList.size() == 0) {
                mUtilityView.hideLoader();
            }
            if (aSuccessResponse == null) {
                AtishayOnlineApp.getAppInstance().getString(R.string.error_network_server_errors);
            } else {
                switch (aApiCode) {
                    case UTILITY_OPERATOR:
                        mUtilityView.doUtilityOperator((ArrayList<UtilityBean>) aSuccessResponse);
                        break;
                    case Constants.APICODE.SURCHARGE:
                        mUtilityView.doSurcharge((ArrayList<SurchargeBean>) aSuccessResponse);
                        break;
                    case UTILITYRECHARGE:
                        mUtilityView.onUtilityRechargeDetails((CommonRechargeResponse) aSuccessResponse);
                        break;
                }
            }
        } else {

        }
    }

    @Override
    public void onApiError(int aApiCode, ApiError<Object> aFailureResponse) {
        if (mUtilityView != null) {
            mApiList.remove(Integer.valueOf(aApiCode));
            if (mApiList.size() == 0) {
                mUtilityView.hideLoader();
            }
            if (aFailureResponse.getApiErrorCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
                mUtilityView.onUserUnAuthorized((String) aFailureResponse.getError());
                return;
            }
            if (aFailureResponse.getApiErrorCode() == -1) {
                mUtilityView.apiError(aApiCode, (String) aFailureResponse.getError());
                return;
            }
            if (aFailureResponse.getError() instanceof String) {
                mUtilityView.apiError((String) aFailureResponse.getError());
                return;
            }
            mUtilityView.apiError((String) AtishayOnlineApp.getAppInstance().getString(R.string.error_network_server_errors));
        } else {

        }
    }

    @Override
    public void registerBus() {

    }

    @Override
    public void unRegisterBus() {

    }

    @Override
    public void clearReferences() {
        mUtilityView = null;
    }
}
